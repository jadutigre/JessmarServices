/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.group.spcsystems.controllers;

import Tool.JDBCUtils;
import com.group.spcsystems.entity.Articulos;
import com.group.spcsystems.entity.Cattipopedido;
import com.group.spcsystems.entity.Clientes;
import com.group.spcsystems.entity.Pedidos;
import com.group.spcsystems.entity.Usuarios;
import com.group.spcsystems.entity.Vendedores;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.SQLRecoverableException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import org.apache.commons.dbutils.handlers.MapHandler;
import org.apache.commons.dbutils.handlers.MapListHandler;
import org.apache.commons.dbutils.handlers.ScalarHandler;
import org.apache.commons.validator.GenericValidator;

/**
 *
 * @author jadut
 */
public class JessmarController {
    
String  GET_LISTA_DE_PEDIDOS = "select * from pedidos order by id  desc";
    
public List<Pedidos> getListaPedidos(){
 System.out.println("getListaPedidos");
 Connection dbCon = null;
 List<Pedidos> listapedidos = new ArrayList<Pedidos>();
 
 try{
     
		dbCon = new JDBCUtils().connectDatabase();
                QueryRunner run = new QueryRunner();

                // Use the BeanListHandler implementation to convert all
                // ResultSet rows into a List of Person JavaBeans.
                ResultSetHandler<List<Pedidos>> h = new BeanListHandler<Pedidos>(Pedidos.class);

                // Execute the SQL statement and return the results in a List of
                // Person objects generated by the BeanListHandler.
                listapedidos = run.query(dbCon, GET_LISTA_DE_PEDIDOS, h );

 }catch(Exception e){
                e.printStackTrace();
 }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                 }
             }
            
 }
return listapedidos;
}
    
String  GET_LISTA_DE_USUARIOS = "select * from usuarios order by id desc";
    
public List<Usuarios> getListaUsuarios(){
 System.out.println("getListaUsuarios");
 Connection dbCon = null;
 List<Usuarios> listausuarios = new ArrayList<Usuarios>();
 
 try{
     
		dbCon = new JDBCUtils().connectDatabase();
                QueryRunner run = new QueryRunner();

                // Use the BeanListHandler implementation to convert all
                // ResultSet rows into a List of Person JavaBeans.
                ResultSetHandler<List<Usuarios>> h = new BeanListHandler<Usuarios>(Usuarios.class);

                // Execute the SQL statement and return the results in a List of
                // Person objects generated by the BeanListHandler.
                listausuarios = run.query(dbCon, GET_LISTA_DE_USUARIOS, h );

 }catch(Exception e){
                e.printStackTrace();
 }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                 }
             }
            
 }
return listausuarios;
}
    

public Usuarios getOneUsuario(String idusuario) {

     //TODO write your implementation code here:
     Usuarios   reng = null;
     Connection dbCon = null;
     try{

            dbCon =   new JDBCUtils().connectDatabase();

            QueryRunner run = new QueryRunner();

            // Use the BeanListHandler implementation to convert all
            // ResultSet rows into a List of Person JavaBeans.
            ResultSetHandler<Usuarios> h =
                    new BeanHandler<Usuarios>(Usuarios.class);

            // Execute the SQL statement and return the results in a List of
            // Person objects generated by the BeanListHandler.
            String query = "select * from usuarios where usuario=? ";

            reng = run.query(dbCon, query , h , idusuario);

     }catch ( SQLRecoverableException rec){

                rec.printStackTrace();

        }catch(Exception ex){
            
                ex.printStackTrace();
                
        }finally{
         
                if(dbCon!=null){
                     try{
                         dbCon.close();
                     }catch(SQLException sqle){
                             sqle.printStackTrace();
                     }
                 }

        }

    return reng;

}

String  GET_CATALOGO_TIPO_PEDIDO = "select * from cattipopedido order by id desc";

public List<Cattipopedido> getCatalogoTipoPedido(){
     //TODO write your implementation code here:
     List<Cattipopedido> cattipospedido = new ArrayList<Cattipopedido>();
     Connection dbCon = null;
     try{

            dbCon =   new JDBCUtils().connectDatabase();

            QueryRunner run = new QueryRunner();

            // Use the BeanListHandler implementation to convert all
            // ResultSet rows into a List of Person JavaBeans.
            ResultSetHandler<List<Cattipopedido>> h = new BeanListHandler<Cattipopedido>(Cattipopedido.class);
            

            // Execute the SQL statement and return the results in a List of
            // Person objects generated by the BeanListHandler.
         

            cattipospedido = run.query(dbCon, GET_CATALOGO_TIPO_PEDIDO , h );

     }catch ( SQLRecoverableException rec){

                rec.printStackTrace();

        }catch(Exception ex){
            
                ex.printStackTrace();
                
        }finally{
         
                if(dbCon!=null){
                     try{
                         dbCon.close();
                     }catch(SQLException sqle){
                             sqle.printStackTrace();
                     }
                 }

        }

    return cattipospedido;
}
    

String  GET_CATALOGO_VENDEDORES = "select * from vendedores where activo = true order by id asc";

public List<Vendedores> getCatalogoVendedores(){
     
     List<Vendedores> vendedores = new ArrayList<Vendedores>();
     Connection dbCon = null;
     try{

            dbCon =   new JDBCUtils().connectDatabase();

            QueryRunner run = new QueryRunner();

            // Use the BeanListHandler implementation to convert all
            // ResultSet rows into a List of Person JavaBeans.
            ResultSetHandler<List<Vendedores>> h = new BeanListHandler<Vendedores>(Vendedores.class);
            

            // Execute the SQL statement and return the results in a List of
            // Person objects generated by the BeanListHandler.
         

            vendedores = run.query(dbCon, GET_CATALOGO_VENDEDORES , h );

     }catch ( SQLRecoverableException rec){

                rec.printStackTrace();

        }catch(Exception ex){
            
                ex.printStackTrace();
                
        }finally{
         
                if(dbCon!=null){
                     try{
                         dbCon.close();
                     }catch(SQLException sqle){
                             sqle.printStackTrace();
                     }
                 }

        }

    return vendedores;
}


String  GET_CATALOGO_ARTICULOS = "select * from articulos where activo = true order by id asc";

public List<Articulos> getCatalogoArticulos(){
     
     List<Articulos> articulos = new ArrayList<Articulos>();
     Connection dbCon = null;
     try{

            dbCon =   new JDBCUtils().connectDatabase();

            QueryRunner run = new QueryRunner();

            // Use the BeanListHandler implementation to convert all
            // ResultSet rows into a List of Person JavaBeans.
            ResultSetHandler<List<Articulos>> h = new BeanListHandler<Articulos>(Articulos.class);
            

            // Execute the SQL statement and return the results in a List of
            // Person objects generated by the BeanListHandler.
         

            articulos = run.query(dbCon, GET_CATALOGO_ARTICULOS , h );

     }catch ( SQLRecoverableException rec){

                rec.printStackTrace();

        }catch(Exception ex){
            
                ex.printStackTrace();
                
        }finally{
         
                if(dbCon!=null){
                     try{
                         dbCon.close();
                     }catch(SQLException sqle){
                             sqle.printStackTrace();
                     }
                 }

        }

    return articulos;
}
    


String  GET_CATALOGO_CLIENTES = "select * from clientes  order by id asc";

public List<Clientes> getCatalogoClientes(){
     
     List<Clientes> clientes = new ArrayList<Clientes>();
     Connection dbCon = null;
     try{

            dbCon =   new JDBCUtils().connectDatabase();

            QueryRunner run = new QueryRunner();

            // Use the BeanListHandler implementation to convert all
            // ResultSet rows into a List of Person JavaBeans.
            ResultSetHandler<List<Clientes>> h = new BeanListHandler<Clientes>(Clientes.class);
            

            // Execute the SQL statement and return the results in a List of
            // Person objects generated by the BeanListHandler.
         

            clientes = run.query(dbCon, GET_CATALOGO_CLIENTES , h );

     }catch ( SQLRecoverableException rec){

                rec.printStackTrace();

        }catch(Exception ex){
            
                ex.printStackTrace();
                
        }finally{
         
                if(dbCon!=null){
                     try{
                         dbCon.close();
                     }catch(SQLException sqle){
                             sqle.printStackTrace();
                     }
                 }

        }

    return clientes;
}

 String  GET_LISTA_DE_ARTICULOS = "select * from articulos where activo = true order by id asc";

public Map<String, Object> getListaArticulos(){
 System.out.println("getListaArticulos");
 Connection dbCon = null;
 Map<String, Object> resp = new HashMap<String, Object> ();
 List<Map<String, Object>> listaarticulos = new ArrayList<Map<String, Object>>();
 
 try{
     
		dbCon = new JDBCUtils().connectDatabase();
                 QueryRunner queryRunner = new QueryRunner();
             
                listaarticulos = queryRunner.query(dbCon, GET_LISTA_DE_ARTICULOS, new MapListHandler() );
                
                if(listaarticulos == null || listaarticulos.isEmpty()){
                        resp.put("success", Boolean.FALSE);
                        resp.put("erromsg", "The Table is empty");
                        resp.put("payload", null);                    
                }else{
                        resp.put("success", Boolean.TRUE);
                        resp.put("erromsg", null);
                        resp.put("payload", listaarticulos);
                }

 }catch(Exception e){
                e.printStackTrace();
 }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                 }
             }
            
 }
 return resp;

}

String  GET_PEDIDOBYID = "select * from pedidos where id =";
String  GET_PEDIDOSDETALLE = "select * from pedidos_detalle where pedido_id =";

public Map<String, Object> getPedidoById(String id){
 System.out.println("getPedidoById con id " + id );
 Connection dbCon = null;
 
 Map<String, Object> pedido = new HashMap<String, Object>();
 List<Map<String, Object>> pedidosdetalle = new ArrayList<Map<String, Object>>();
 Map<String, Object> resp = new HashMap<String, Object> ();
  
 if(!StringUtils.isNumeric(id)){
     resp.put("success", Boolean.FALSE);
     resp.put("erromsg", "ID invalido");
     resp.put("payload", null);
     
     return resp;
 }
 
 try{
     
		dbCon = new JDBCUtils().connectDatabase();           
                QueryRunner queryRunner = new QueryRunner();
                
                pedido = queryRunner.query(dbCon, GET_PEDIDOBYID+id, new MapHandler() );
                
                
                if(pedido != null &&  !pedido.isEmpty() ){ //  Proceso detalles
                    
                    // cambiop fecha a Styring
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
                    String sfechapedido = sdf.format(pedido.get("fechapedido"));
                    pedido.remove("fechapedido");
                    pedido.put("fechapedido", sfechapedido);
                    
                    
                    pedidosdetalle = queryRunner.query(dbCon, GET_PEDIDOSDETALLE+id, new MapListHandler() );
                    
                    
                    pedido.put("pedidosdetalle",pedidosdetalle);
                    
                    resp.put("success", Boolean.TRUE);
                    resp.put("erromsg", null);
                    resp.put("payload", pedido);
                    
                }else{
                    resp.put("success", Boolean.FALSE);
                    resp.put("erromsg", "ID not found");
                    resp.put("payload", null);
                }

 }catch(Exception e){
                e.printStackTrace();
 }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                 }
             }
            
 }
return resp;
}

String  INSERT_PEDIDOS = "INSERT INTO pedidos(version, fechapedido, usuario, clientes_id, vendedor_id,tipopedido_id, areaentrega) VALUES(?,?,?,?,?,?,?)";
String  UPDATE_PEDIDOS = "UPDATE pedidos SET version=?, fechapedido=?, usuario=?, clientes_id=?, vendedor_id=?, tipopedido_id=?, areaentrega=? WHERE id=?";
String  INSERT_PEDIDODETALLE = "INSERT INTO pedidos_detalle(version, cantidad, total, precio, articulo_id, pedido_id ) VALUES (?,?,?,?,?,?)";
String  UPDATE_PEDIDODETALLE = "UPDATE pedidos_detalle SET version=?, cantidad=?, total=?, precio=?, articulo_id=?, pedido_id=? WHERE id=?";      
        
public Map<String, Object> insertaPedido(Map elpedido){
    
    Connection dbCon = null;
    Map<String, Object> resp = new HashMap<String, Object> ();
    Map<String, Object> payload = new HashMap<String, Object> ();
    ScalarHandler<Long> scalarHandler = new ScalarHandler<Long>(); // paraa qyue obtenga el id
    // Proceso el mapa del pedido y sus detalles.
    // CABECERA
       Integer id              =  elpedido.get("id") == null ? 0 :   (Integer)elpedido.get("id");  // si viene es update si no viene o es cero es insert
       Integer clientes_id   =  elpedido.get("cliente_id") == null ? 0 : (Integer)elpedido.get("cliente_id") ;
       Integer vendedor_id   =  elpedido.get("vendedor_id") == null ? 0 : (Integer)elpedido.get("vendedor_id");
       Integer tipopedido_id =  elpedido.get("tipopedido_id") == null ? 0 : (Integer)elpedido.get("tipopedido_id");
       String fechapedido      =  (String) elpedido.get("fechapedido");  // formato yyyy-MM-dd HH:mmm la hpra en foprmato de 24 horas
       String usuario          =  (String)elpedido.get("usuario");
       String areaentrega      =  (String)elpedido.get("areaentrega");
       List<Map<String, Object>> detalles = (List<Map<String, Object>>)elpedido.get("pedidosDetalle");
       
       if(clientes_id == 0){
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", "cliente_id invalido");
            resp.put("payload", null);
            return resp;
       }
       
       if(vendedor_id == 0){
           resp.put("success", Boolean.FALSE);
            resp.put("erromsg", "Vendedor_id invalido");
            resp.put("payload", null);
            return resp;
       }
       
       if(tipopedido_id == 0){
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", "tipopedido_id invalido");
            resp.put("payload", null);
            return resp;
       }
       
       if( ! GenericValidator.isDate(fechapedido, "yyyy-MM-dd HH:mm", true) ){
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", "fecha invalida");
            resp.put("payload", null);
            return resp;
       }
       
       if(usuario == null || usuario.length() == 0 ){
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", "Usuario no valido");
            resp.put("payload", null);
            return resp;
       }
       
       //Procedo a grbar el encabezado
       try{
     
		dbCon = new JDBCUtils().connectDatabase();           
                dbCon.setAutoCommit(false);
                QueryRunner queryRunner = new QueryRunner();
                
                 int numrows; 
                 Long newid = 0L;
                if( id != 0){ // Update
                   numrows = queryRunner.update(dbCon, UPDATE_PEDIDOS , 0,fechapedido, usuario, clientes_id, vendedor_id,tipopedido_id, areaentrega, id);
                    payload.put("actualizados", numrows);
                }
                else{
                   
                     newid = queryRunner.insert(dbCon, INSERT_PEDIDOS , scalarHandler, 0, fechapedido, usuario, clientes_id, vendedor_id,tipopedido_id, areaentrega);
                      payload.put("id", newid);
                }
                
                // Procedo a insertar o actualizar los detalles del pedido
               if(detalles != null && !detalles.isEmpty()){
                  for(Map<String, Object> det : detalles){
                        Integer elidDet =     det.get("id")          == null ? 0 : (Integer)det.get("id"); 
                        Integer articulo_id = det.get("articulo_id") == null ? 0    : (Integer)det.get("articulo_id");                    
                        Double cantidad =     det.get("cantidad")    == null ? 0.00 : (Double)det.get("cantidad");;
                        Double precio =       det.get("precio")      == null ? 0.00 : (Double)det.get("precio");
                        Double total =        det.get("total")       == null ? 0.00 : (Double)det.get("total");
                        
                        if(id == 0){  // Es  insercion de maestro, tambien inserto todos los detALLESdetalles
                            queryRunner.insert(dbCon, INSERT_PEDIDODETALLE, scalarHandler , 0, cantidad, total, precio, articulo_id, newid);
                        }else{ //actualizo detalles o inserto nuevos dependiend si traen o no su id
                            if(elidDet ==  0){  // Inserto detlle
                                queryRunner.insert(dbCon, INSERT_PEDIDODETALLE, scalarHandler , 0, cantidad, total, precio, articulo_id, id);
                            }else{
                                queryRunner.update(dbCon, UPDATE_PEDIDODETALLE, 0, cantidad, total, precio, articulo_id, id , elidDet);
                            }
                        }
                        
                   }
               }
                
                // Finalizo
                DbUtils.commitAndCloseQuietly(dbCon);
                
                resp.put("success", Boolean.TRUE);
                resp.put("erromsg", null);
                resp.put("payload", payload);
               
        }catch(Exception e){
            //procedo roolback
            DbUtils.rollbackAndCloseQuietly(dbCon);
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", e.getMessage());
            resp.put("payload", null);        
        }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                     resp.put("success", Boolean.FALSE);
                     resp.put("erromsg", sqle.getMessage());
                     resp.put("payload", null);      
                 }
             }
            
        }
       
       
    return resp;
    
}

}
