/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.group.spcsystems.controllers;

import Tool.JDBCUtils;
import com.group.spcsystems.entity.Articulos;
import com.group.spcsystems.entity.Cattipopedido;
import com.group.spcsystems.entity.Clientes;
import com.group.spcsystems.entity.Pedidos;
import com.group.spcsystems.entity.PedidosDetalle;
import com.group.spcsystems.entity.Usuarios;
import com.group.spcsystems.entity.Vendedores;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.SQLRecoverableException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import org.apache.commons.dbutils.handlers.MapHandler;
import org.apache.commons.dbutils.handlers.MapListHandler;
import org.apache.commons.dbutils.handlers.ScalarHandler;
import org.apache.commons.validator.GenericValidator;

/**
 *
 * @author jadut
 */
public class JessmarController {
    
String  GET_LISTA_DE_PEDIDOS = "select * from pedidos order by id  desc";
    
public List<Pedidos> getListaPedidos(){
 System.out.println("getListaPedidos");
 Connection dbCon = null;
 List<Pedidos> listapedidos = new ArrayList<Pedidos>();
 
 try{
     
		dbCon = new JDBCUtils().connectDatabase();
                QueryRunner run = new QueryRunner();

                // Use the BeanListHandler implementation to convert all
                // ResultSet rows into a List of Person JavaBeans.
                ResultSetHandler<List<Pedidos>> h = new BeanListHandler<Pedidos>(Pedidos.class);

                // Execute the SQL statement and return the results in a List of
                // Person objects generated by the BeanListHandler.
                listapedidos = run.query(dbCon, GET_LISTA_DE_PEDIDOS, h );

 }catch(Exception e){
                e.printStackTrace();
 }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                 }
             }
            
 }
return listapedidos;
}

String  GET_LISTA_DE_PEDIDOS_FULL = "select p.id as id" +
                                    ",p.fechapedido as fechapedido " +
                                    ",p.usuario as usuario " +
                                    ",p.areaentrega as areaentrega " +
                                    ",tp.id as tipopedido_id " +
                                    ",tp.clave as tipoPedidoClave " +
                                    ",tp.descripcion as tipopedidodescripcion " +
                                    ",c.id as clientes_id " +
                                    ",c.nombre as clientenombre " +
                                    ",c.telefono as clienteTelefono " +
                                    ",v.id as vendedor_id " +
                                    ",v.clave as vendedorClave " +
                                    ",v.nombre as vendedornombre " +
                                    "from pedidos p, cattipopedido tp, clientes c, vendedores v " +
                                    "where p.tipopedido_id = tp.id " +
                                    "and p.clientes_id = c.id " +
                                    "and p.vendedor_id = v.id " +
                                    "order by p.id  desc ";
public Map<String, Object> getListaPedidoFull(){
    
     Connection dbCon = null;
    Map<String, Object> resp = new HashMap<String, Object> ();
   List<Map<String, Object>> listapedidos = new ArrayList<Map<String, Object>>();
    
    
       
       //Procedo a grbar el encabezado
       try{
     
		dbCon = new JDBCUtils().connectDatabase();
                 QueryRunner queryRunner = new QueryRunner();
             
                listapedidos = queryRunner.query(dbCon, GET_LISTA_DE_PEDIDOS_FULL, new MapListHandler() );
                
                //procesdo  la fecha
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
                for (Map<String, Object> pedido : listapedidos) {
                    String sfechapedido = sdf.format(pedido.get("fechapedido"));
                    pedido.remove("fechapedido");
                    pedido.put("fechapedido", sfechapedido);
                }
                 
                   
                    
                
                if(listapedidos == null || listapedidos.isEmpty()){
                        resp.put("success", Boolean.FALSE);
                        resp.put("erromsg", "The Table is empty");
                        resp.put("payload", null);                    
                }else{
                        resp.put("success", Boolean.TRUE);
                        resp.put("erromsg", null);
                        resp.put("payload", listapedidos);
                }
                
                       
               
        }catch(Exception e){
            //procedo roolback
            DbUtils.rollbackAndCloseQuietly(dbCon);
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", e.getMessage());
            resp.put("payload", null);        
        }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                     resp.put("success", Boolean.FALSE);
                     resp.put("erromsg", sqle.getMessage());
                     resp.put("payload", null);      
                 }
             }
            
        }
       
       
    return resp;
}
    
String  GET_LISTA_DE_USUARIOS = "select * from usuarios order by id desc";
    
public List<Usuarios> getListaUsuarios(){
 System.out.println("getListaUsuarios");
 Connection dbCon = null;
 List<Usuarios> listausuarios = new ArrayList<Usuarios>();
 
 try{
     
		dbCon = new JDBCUtils().connectDatabase();
                QueryRunner run = new QueryRunner();

                // Use the BeanListHandler implementation to convert all
                // ResultSet rows into a List of Person JavaBeans.
                ResultSetHandler<List<Usuarios>> h = new BeanListHandler<Usuarios>(Usuarios.class);

                // Execute the SQL statement and return the results in a List of
                // Person objects generated by the BeanListHandler.
                listausuarios = run.query(dbCon, GET_LISTA_DE_USUARIOS, h );

 }catch(Exception e){
                e.printStackTrace();
 }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                 }
             }
            
 }
return listausuarios;
}
    

public Usuarios getOneUsuario(String idusuario) {

     //TODO write your implementation code here:
     Usuarios   reng = null;
     Connection dbCon = null;
     try{

            dbCon =   new JDBCUtils().connectDatabase();

            QueryRunner run = new QueryRunner();

            // Use the BeanListHandler implementation to convert all
            // ResultSet rows into a List of Person JavaBeans.
            ResultSetHandler<Usuarios> h =
                    new BeanHandler<Usuarios>(Usuarios.class);

            // Execute the SQL statement and return the results in a List of
            // Person objects generated by the BeanListHandler.
            String query = "select * from usuarios where usuario=? ";

            reng = run.query(dbCon, query , h , idusuario);

     }catch ( SQLRecoverableException rec){

                rec.printStackTrace();

        }catch(Exception ex){
            
                ex.printStackTrace();
                
        }finally{
         
                if(dbCon!=null){
                     try{
                         dbCon.close();
                     }catch(SQLException sqle){
                             sqle.printStackTrace();
                     }
                 }

        }

    return reng;

}

String  GET_CATALOGO_TIPO_PEDIDO = "select * from cattipopedido order by id desc";

public List<Cattipopedido> getCatalogoTipoPedido(){
     //TODO write your implementation code here:
     List<Cattipopedido> cattipospedido = new ArrayList<Cattipopedido>();
     Connection dbCon = null;
     try{

            dbCon =   new JDBCUtils().connectDatabase();

            QueryRunner run = new QueryRunner();

            // Use the BeanListHandler implementation to convert all
            // ResultSet rows into a List of Person JavaBeans.
            ResultSetHandler<List<Cattipopedido>> h = new BeanListHandler<Cattipopedido>(Cattipopedido.class);
            

            // Execute the SQL statement and return the results in a List of
            // Person objects generated by the BeanListHandler.
         

            cattipospedido = run.query(dbCon, GET_CATALOGO_TIPO_PEDIDO , h );

     }catch ( SQLRecoverableException rec){

                rec.printStackTrace();

        }catch(Exception ex){
            
                ex.printStackTrace();
                
        }finally{
         
                if(dbCon!=null){
                     try{
                         dbCon.close();
                     }catch(SQLException sqle){
                             sqle.printStackTrace();
                     }
                 }

        }

    return cattipospedido;
}
    

String  GET_CATALOGO_VENDEDORES = "select * from vendedores where activo = true order by id asc";

public List<Vendedores> getCatalogoVendedores(){
     
     List<Vendedores> vendedores = new ArrayList<Vendedores>();
     Connection dbCon = null;
     try{

            dbCon =   new JDBCUtils().connectDatabase();

            QueryRunner run = new QueryRunner();

            // Use the BeanListHandler implementation to convert all
            // ResultSet rows into a List of Person JavaBeans.
            ResultSetHandler<List<Vendedores>> h = new BeanListHandler<Vendedores>(Vendedores.class);
            

            // Execute the SQL statement and return the results in a List of
            // Person objects generated by the BeanListHandler.
         

            vendedores = run.query(dbCon, GET_CATALOGO_VENDEDORES , h );

     }catch ( SQLRecoverableException rec){

                rec.printStackTrace();

        }catch(Exception ex){
            
                ex.printStackTrace();
                
        }finally{
         
                if(dbCon!=null){
                     try{
                         dbCon.close();
                     }catch(SQLException sqle){
                             sqle.printStackTrace();
                     }
                 }

        }

    return vendedores;
}


String  GET_CATALOGO_ARTICULOS = "select * from articulos where activo = true order by id asc";

public List<Articulos> getCatalogoArticulos(){
     
     List<Articulos> articulos = new ArrayList<Articulos>();
     Connection dbCon = null;
     try{

            dbCon =   new JDBCUtils().connectDatabase();

            QueryRunner run = new QueryRunner();

            // Use the BeanListHandler implementation to convert all
            // ResultSet rows into a List of Person JavaBeans.
            ResultSetHandler<List<Articulos>> h = new BeanListHandler<Articulos>(Articulos.class);
            

            // Execute the SQL statement and return the results in a List of
            // Person objects generated by the BeanListHandler.
         

            articulos = run.query(dbCon, GET_CATALOGO_ARTICULOS , h );

     }catch ( SQLRecoverableException rec){

                rec.printStackTrace();

        }catch(Exception ex){
            
                ex.printStackTrace();
                
        }finally{
         
                if(dbCon!=null){
                     try{
                         dbCon.close();
                     }catch(SQLException sqle){
                             sqle.printStackTrace();
                     }
                 }

        }

    return articulos;
}
    


String  GET_CATALOGO_CLIENTES = "select * from clientes  order by id asc";

public List<Clientes> getCatalogoClientes(){
     
     List<Clientes> clientes = new ArrayList<Clientes>();
     Connection dbCon = null;
     try{

            dbCon =   new JDBCUtils().connectDatabase();

            QueryRunner run = new QueryRunner();

            // Use the BeanListHandler implementation to convert all
            // ResultSet rows into a List of Person JavaBeans.
            ResultSetHandler<List<Clientes>> h = new BeanListHandler<Clientes>(Clientes.class);
            

            // Execute the SQL statement and return the results in a List of
            // Person objects generated by the BeanListHandler.
         

            clientes = run.query(dbCon, GET_CATALOGO_CLIENTES , h );

     }catch ( SQLRecoverableException rec){

                rec.printStackTrace();

        }catch(Exception ex){
            
                ex.printStackTrace();
                
        }finally{
         
                if(dbCon!=null){
                     try{
                         dbCon.close();
                     }catch(SQLException sqle){
                             sqle.printStackTrace();
                     }
                 }

        }

    return clientes;
}

 String  GET_LISTA_DE_ARTICULOS = "select * from articulos where activo = true order by id asc";

public Map<String, Object> getListaArticulos(){
 System.out.println("getListaArticulos");
 Connection dbCon = null;
 Map<String, Object> resp = new HashMap<String, Object> ();
 List<Map<String, Object>> listaarticulos = new ArrayList<Map<String, Object>>();
 
 try{
     
		dbCon = new JDBCUtils().connectDatabase();
                 QueryRunner queryRunner = new QueryRunner();
             
                listaarticulos = queryRunner.query(dbCon, GET_LISTA_DE_ARTICULOS, new MapListHandler() );
                
                if(listaarticulos == null || listaarticulos.isEmpty()){
                        resp.put("success", Boolean.FALSE);
                        resp.put("erromsg", "The Table is empty");
                        resp.put("payload", null);                    
                }else{
                        resp.put("success", Boolean.TRUE);
                        resp.put("erromsg", null);
                        resp.put("payload", listaarticulos);
                }

 }catch(Exception e){
                e.printStackTrace();
 }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                 }
             }
            
 }
 return resp;

}


String GET_LISTAARTICULOS_FULL =  "select a.id as id " +
                                ",a.lugar as lugar " +
                                ",a.valoriva as valorIva " +
                                ",a.pcio1 as precio1 " +
                                ",a.pcio2 as precio2 " +
                                ",a.pcio3 as precio3 " +
                                ",a.pcio4 as precio4 " +
                                ",a.parte as parte " +
                                ",a.estatus as estatus " +
                                ",a.codant as codAnt " +
                                ",a.minimo as minimo " +
                                ",a.valorutmin as valorUtMin " +
                                ",a.maximo as maximo " +
                                ",a.codigo as codigo " +
                                ",a.valorutsug as valorUtSug " +
                                ",a.descripcion as descripcion " +
                                ",a.activo as activo " +
                                ",g.id as grupoId " +
                                ",g.clave as grupoClave " +
                                ",g.descripcion as grupoDescripcion " +
                                ",sg.id as subgrupoId " +
                                ",sg.clave as subgrupoClave " +
                                ",sg.descripcion as subgrupoDescripcion " +
                                ",um.id as unidaMedidaId " +
                                ",um.clave as unidadMedidaClave " +
                                ",um.descripcion as unidadMedidaDescripcion " +
                                ",al.id as almacenId " +
                                ",al.clave as almacenClave " +
                                ",al.descripcion as almacenDescripcion " +
                                "from articulos a, grupo g, subgrupo sg, catunidadmedidas um, almacen al " +
                                "where  a.grupo_id = g.id " +
                                "and a.subgrupo_id = sg.id " +
                                "and a.unidmed_id = um.id " +
                                "and a.almacen_id = al.id " +
                                "order by a.descripcion asc";

public Map<String, Object> getListaArticulosFull(){
Connection dbCon = null;
Map<String, Object> resp = new HashMap<String, Object> ();
List<Map<String, Object>> listaarticulos = new ArrayList<Map<String, Object>>();
 
 try{
     
		dbCon = new JDBCUtils().connectDatabase();
                 QueryRunner queryRunner = new QueryRunner();
             
                listaarticulos = queryRunner.query(dbCon, GET_LISTAARTICULOS_FULL, new MapListHandler() );
                
                if(listaarticulos == null || listaarticulos.isEmpty()){
                        resp.put("success", Boolean.FALSE);
                        resp.put("erromsg", "The Table is empty");
                        resp.put("payload", null);                    
                }else{
                        resp.put("success", Boolean.TRUE);
                        resp.put("erromsg", null);
                        resp.put("payload", listaarticulos);
                }

 }catch(Exception e){
                e.printStackTrace();
 }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                 }
             }
            
 }
 return resp;

}



String  GET_PEDIDOBYID =            "select p.id as id" +
                                    ",p.fechapedido as fechapedido " +
                                    ",p.usuario as usuario " +
                                    ",p.areaentrega as areaentrega " +
                                    ",tp.id as tipopedido_id " +
                                    ",tp.clave as tipoPedidoClave " +
                                    ",tp.descripcion as tipopedidodescripcion " +
                                    ",c.id as clientes_id " +
                                    ",c.nombre as clientenombre " +
                                    ",c.telefono as clienteTelefono " +
                                    ",v.id as vendedor_id " +
                                    ",v.clave as vendedorClave " +
                                    ",v.nombre as vendedornombre " +
                                    "from pedidos p, cattipopedido tp, clientes c, vendedores v " +
                                    "where p.tipopedido_id = tp.id " +
                                    "and p.clientes_id = c.id " +
                                    "and p.vendedor_id = v.id " +
                                    "and p.id = ";


String  GET_PEDIDOSDETALLE =    "select pd.id as id " +
                                ",pd.cantidad as cantidad " +
                                ",pd.total as total " +
                                ",pd.precio as precio " +
                                ",pd.pedido_id as pedido_id"+
                                ",a.id as articulo_id " +
                                ",a.codigo as articuloCodigo " +
                                ",a.descripcion as articulodescripcion " +
                                "from pedidos_detalle pd, articulos a " +
                                " where pd.articulo_id = a.id " +
                                " and pedido_id = ";

public Map<String, Object> getPedidoById(String id){
 System.out.println("getPedidoById con id " + id );
 Connection dbCon = null;
 
 Map<String, Object> pedido = new HashMap<String, Object>();
 List<Map<String, Object>> pedidosdetalle = new ArrayList<Map<String, Object>>();
 Map<String, Object> resp = new HashMap<String, Object> ();
  
 if(!StringUtils.isNumeric(id)){
     resp.put("success", Boolean.FALSE);
     resp.put("erromsg", "ID invalido");
     resp.put("payload", null);
     
     return resp;
 }
 
 try{
     
		dbCon = new JDBCUtils().connectDatabase();           
                QueryRunner queryRunner = new QueryRunner();
                
                pedido = queryRunner.query(dbCon, GET_PEDIDOBYID+id, new MapHandler() );
                
                
                if(pedido != null &&  !pedido.isEmpty() ){ //  Proceso detalles
                    
                    // cambiop fecha a Styring
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
                    String sfechapedido = sdf.format(pedido.get("fechapedido"));
                    pedido.remove("fechapedido");
                    pedido.put("fechapedido", sfechapedido);
                    
                    
                    pedidosdetalle = queryRunner.query(dbCon, GET_PEDIDOSDETALLE+id, new MapListHandler() );
                    
                    
                    pedido.put("pedidosdetalle",pedidosdetalle);
                    
                    resp.put("success", Boolean.TRUE);
                    resp.put("erromsg", null);
                    resp.put("payload", pedido);
                    
                }else{
                    resp.put("success", Boolean.FALSE);
                    resp.put("erromsg", "ID not found");
                    resp.put("payload", null);
                }

 }catch(Exception e){
                e.printStackTrace();
 }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                 }
             }
            
 }
return resp;
}

String  INSERT_PEDIDOS = "INSERT INTO pedidos(version, fechapedido, usuario, clientes_id, vendedor_id,tipopedido_id, areaentrega) VALUES(?,?,?,?,?,?,?)";
String  UPDATE_PEDIDOS = "UPDATE pedidos SET version=?, fechapedido=?, usuario=?, clientes_id=?, vendedor_id=?, tipopedido_id=?, areaentrega=? WHERE id=?";
String  INSERT_PEDIDODETALLE = "INSERT INTO pedidos_detalle(version, cantidad, total, precio, articulo_id, pedido_id ) VALUES (?,?,?,?,?,?)";
String  UPDATE_PEDIDODETALLE = "UPDATE pedidos_detalle SET version=?, cantidad=?, total=?, precio=?, articulo_id=?, pedido_id=? WHERE id=?";      
        
public Map<String, Object> insertaPedido(Map elpedido){
    
    Connection dbCon = null;
    Map<String, Object> resp = new HashMap<String, Object> ();
    Map<String, Object> payload = new HashMap<String, Object> ();
    ScalarHandler<Long> scalarHandler = new ScalarHandler<Long>(); // paraa qyue obtenga el id
    // Proceso el mapa del pedido y sus detalles.
    // CABECERA
       Integer id              =  elpedido.get("id") == null ? 0 :   (Integer)elpedido.get("id");  // si viene es update si no viene o es cero es insert
       Integer clientes_id   =  elpedido.get("clientes_id") == null ? 0 : (Integer)elpedido.get("clientes_id") ;
       Integer vendedor_id   =  elpedido.get("vendedor_id") == null ? 0 : (Integer)elpedido.get("vendedor_id");
       Integer tipopedido_id =  elpedido.get("tipopedido_id") == null ? 0 : (Integer)elpedido.get("tipopedido_id");
       String fechapedido      =  (String) elpedido.get("fechapedido");  // formato yyyy-MM-dd HH:mmm la hpra en foprmato de 24 horas
       String usuario          =  (String)elpedido.get("usuario");
       String areaentrega      =  (String)elpedido.get("areaentrega");
       List<Map<String, Object>> detalles = (List<Map<String, Object>>)elpedido.get("pedidosdetalle");
       
       if(clientes_id == 0){
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", "cliente_id invalido");
            resp.put("payload", null);
            return resp;
       }
       
       if(vendedor_id == 0){
           resp.put("success", Boolean.FALSE);
            resp.put("erromsg", "Vendedor_id invalido");
            resp.put("payload", null);
            return resp;
       }
       
       if(tipopedido_id == 0){
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", "tipopedido_id invalido");
            resp.put("payload", null);
            return resp;
       }
       
       if( ! GenericValidator.isDate(fechapedido, "yyyy-MM-dd HH:mm", true) ){
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", "fecha invalida");
            resp.put("payload", null);
            return resp;
       }
       
       if(usuario == null || usuario.length() == 0 ){
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", "Usuario no valido");
            resp.put("payload", null);
            return resp;
       }
       
       //Procedo a grbar el encabezado
       try{
     
		dbCon = new JDBCUtils().connectDatabase();           
                dbCon.setAutoCommit(false);
                QueryRunner queryRunner = new QueryRunner();
                
                 int numrows; 
                 Long newid = 0L;
                if( id != 0){ // Update
                   numrows = queryRunner.update(dbCon, UPDATE_PEDIDOS , 0,fechapedido, usuario, clientes_id, vendedor_id,tipopedido_id, areaentrega, id);
                    payload.put("actualizados", numrows);
                }
                else{
                   
                     newid = queryRunner.insert(dbCon, INSERT_PEDIDOS , scalarHandler, 0, fechapedido, usuario, clientes_id, vendedor_id,tipopedido_id, areaentrega);
                      payload.put("id", newid);
                }
                
                // Procedo a insertar o actualizar los detalles del pedido
               if(detalles != null && !detalles.isEmpty()){
                  for(Map<String, Object> det : detalles){
                        Integer elidDet =     det.get("id")          == null ? 0 : (Integer)det.get("id"); 
                        Integer articulo_id = det.get("articulo_id") == null ? 0    : (Integer)det.get("articulo_id");                    
                        Double cantidad =     det.get("cantidad")    == null ? 0.00 : (Double)det.get("cantidad");;
                        Double precio =       det.get("precio")      == null ? 0.00 : (Double)det.get("precio");
                        Double total =        det.get("total")       == null ? 0.00 : (Double)det.get("total");
                        
                        if(id == 0){  // Es  insercion de maestro, tambien inserto todos los detALLESdetalles
                            queryRunner.insert(dbCon, INSERT_PEDIDODETALLE, scalarHandler , 0, cantidad, total, precio, articulo_id, newid);
                        }else{ //actualizo detalles o inserto nuevos dependiend si traen o no su id
                            if(elidDet ==  0){  // Inserto detlle
                                queryRunner.insert(dbCon, INSERT_PEDIDODETALLE, scalarHandler , 0, cantidad, total, precio, articulo_id, id);
                            }else{
                                queryRunner.update(dbCon, UPDATE_PEDIDODETALLE, 0, cantidad, total, precio, articulo_id, id , elidDet);
                            }
                        }
                        
                   }
               }
                
                // Finalizo
                DbUtils.commitAndCloseQuietly(dbCon);
                
                resp.put("success", Boolean.TRUE);
                resp.put("erromsg", null);
                resp.put("payload", payload);
               
        }catch(Exception e){
            //procedo roolback
            DbUtils.rollbackAndCloseQuietly(dbCon);
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", e.getMessage());
            resp.put("payload", null);        
        }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                     resp.put("success", Boolean.FALSE);
                     resp.put("erromsg", sqle.getMessage());
                     resp.put("payload", null);      
                 }
             }
            
        }
       
       
    return resp;
    
}

String GET_CLIENTEBYID = "Select * from clientes where id = ";
public Clientes getOneClienteById(String  id){
      
     Clientes   reng = null;
     Connection dbCon = null;
     try{

            dbCon =   new JDBCUtils().connectDatabase();

            QueryRunner run = new QueryRunner();

                
            ResultSetHandler<Clientes> h = new BeanHandler<Clientes>(Clientes.class);

            
            reng = run.query(dbCon, GET_CLIENTEBYID+id , h);

     }catch ( SQLRecoverableException rec){

                rec.printStackTrace();

        }catch(Exception ex){
            
                ex.printStackTrace();
                
        }finally{
         
                if(dbCon!=null){
                     try{
                         dbCon.close();
                     }catch(SQLException sqle){
                             sqle.printStackTrace();
                     }
                 }

        }

    return reng;
    
}


String GET_VENDEDORBYID = "Select * from vendedores where id = ";
public Vendedores getOneVendedorById(String  id){
      
     Vendedores   reng = null;
     Connection dbCon = null;
     try{

            dbCon =   new JDBCUtils().connectDatabase();

            QueryRunner run = new QueryRunner();

                
            ResultSetHandler<Vendedores> h = new BeanHandler<Vendedores>(Vendedores.class);

            
            reng = run.query(dbCon, GET_VENDEDORBYID+id , h);

     }catch ( SQLRecoverableException rec){

                rec.printStackTrace();

        }catch(Exception ex){
            
                ex.printStackTrace();
                
        }finally{
         
                if(dbCon!=null){
                     try{
                         dbCon.close();
                     }catch(SQLException sqle){
                             sqle.printStackTrace();
                     }
                 }

        }

    return reng;
    
}

String GET_ARTICULOBYID = "Select * from articulos where id = ";
public Articulos getOneArticuloById(String  id){
      
     Articulos   reng = null;
     Connection dbCon = null;
     try{

            dbCon =   new JDBCUtils().connectDatabase();

            QueryRunner run = new QueryRunner();

                
            ResultSetHandler<Articulos> h = new BeanHandler<Articulos>(Articulos.class);

            
            reng = run.query(dbCon, GET_ARTICULOBYID+id , h);

     }catch ( SQLRecoverableException rec){

                rec.printStackTrace();

        }catch(Exception ex){
            
                ex.printStackTrace();
                
        }finally{
         
                if(dbCon!=null){
                     try{
                         dbCon.close();
                     }catch(SQLException sqle){
                             sqle.printStackTrace();
                     }
                 }

        }

    return reng;
    
}


String GET_ARTICULOBYID_FULL =  "select a.id as id " +
                                ",a.lugar as lugar " +
                                ",a.valoriva as valorIva " +
                                ",a.pcio1 as precio1 " +
                                ",a.pcio2 as precio2 " +
                                ",a.pcio3 as precio3 " +
                                ",a.pcio4 as precio4 " +
                                ",a.parte as parte " +
                                ",a.estatus as estatus " +
                                ",a.codant as codAnt " +
                                ",a.minimo as minimo " +
                                ",a.valorutmin as valorUtMin " +
                                ",a.maximo as maximo " +
                                ",a.codigo as codigo " +
                                ",a.valorutsug as valorUtSug " +
                                ",a.descripcion as descripcion " +
                                ",a.activo as activo " +
                                ",g.id as grupoId " +
                                ",g.clave as grupoClave " +
                                ",g.descripcion as grupoDescripcion " +
                                ",sg.id as subgrupoId " +
                                ",sg.clave as subgrupoClave " +
                                ",sg.descripcion as subgrupoDescripcion " +
                                ",um.id as unidaMedidaId " +
                                ",um.clave as unidadMedidaClave " +
                                ",um.descripcion as unidadMedidaDescripcion " +
                                ",al.id as almacenId " +
                                ",al.clave as almacenClave " +
                                ",al.descripcion as almacenDescripcion " +
                                "from articulos a, grupo g, subgrupo sg, catunidadmedidas um, almacen al " +
                                "where  a.grupo_id = g.id " +
                                "and a.subgrupo_id = sg.id " +
                                "and a.unidmed_id = um.id " +
                                "and a.almacen_id = al.id " +
                                "and a.id = ";
public Map<String, Object> getOneArticuloByIdFull(String  id){
    
   Connection dbCon = null;
   Map<String, Object> resp = new HashMap<String, Object> ();
   Map<String, Object> articulo = new HashMap<String, Object> ();
    
    
       
       //Procedo a grbar el encabezado
       try{
     
		dbCon = new JDBCUtils().connectDatabase();
                 QueryRunner queryRunner = new QueryRunner();
             
                articulo = queryRunner.query(dbCon, GET_ARTICULOBYID_FULL+ id , new MapHandler() );
                
               
                 
                   
                    
                
                if(articulo == null || articulo.isEmpty()){
                        resp.put("success", Boolean.FALSE);
                        resp.put("erromsg", "The Table is empty");
                        resp.put("payload", null);                    
                }else{
                        resp.put("success", Boolean.TRUE);
                        resp.put("erromsg", null);
                        resp.put("payload", articulo);
                }
                
                       
               
        }catch(Exception e){
            //procedo roolback
            DbUtils.rollbackAndCloseQuietly(dbCon);
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", e.getMessage());
            resp.put("payload", null);        
        }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                     resp.put("success", Boolean.FALSE);
                     resp.put("erromsg", sqle.getMessage());
                     resp.put("payload", null);      
                 }
             }
            
        }
       
       
    return resp;
}


String GET_LISTADETALLEPEDIOBYIDPEDIDO =    "SELECT pd.id " +
                                            ", cantidad " +
                                            ",total " +
                                            ",precio " +
                                            ",pedido_id "+
                                            ",a.id as articulo_id " +
                                            ",a.descripcion as articulodescripcion " +
                                            "from " +
                                            "pedidos_detalle pd, articulos a  " +
                                            "where pd.articulo_id = a.id " +
                                            "and pd.pedido_id  = ";
public Map<String, Object> getListaPedidoDetalleByIdPedido(String id){
   Connection dbCon = null;
   List<Map<String, Object>> pedidodetalle =  new ArrayList<Map<String, Object>>();
   Map<String, Object>  resp = new HashMap<String, Object> ();
    
    
       
       //Procedo a grbar el encabezado
       try{
     
		dbCon = new JDBCUtils().connectDatabase();
                 QueryRunner queryRunner = new QueryRunner();
             
                pedidodetalle = queryRunner.query(dbCon, GET_LISTADETALLEPEDIOBYIDPEDIDO+ id , new MapListHandler() );
                                         
                if(pedidodetalle == null || pedidodetalle.isEmpty()){
                        resp.put("success", Boolean.FALSE);
                        resp.put("erromsg", "The Table is empty");
                        resp.put("payload", null);                    
                }else{
                        resp.put("success", Boolean.TRUE);
                        resp.put("erromsg", null);
                        resp.put("payload", pedidodetalle);
                }
                
                       
               
        }catch(Exception e){        
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", e.getMessage());
            resp.put("payload", null);        
        }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                     resp.put("success", Boolean.FALSE);
                     resp.put("erromsg", sqle.getMessage());
                     resp.put("payload", null);      
                 }
             }
            
        }
       
       
    return resp;

}


String DETELEPEDIDOBYID =    "DELETE FROM pedidos_detalle WHERE id = ";
public Map<String, Object> deletePedidoDetalleById(String id){
   Connection dbCon = null;
   int resultadoSQL ;
   Map<String, Object>  resp = new HashMap<String, Object> ();
   Map<String, Integer>  registrosborrados = new HashMap<String, Integer> ();
    
       
       //Procedo a grbar el encabezado
       try{
     
		dbCon = new JDBCUtils().connectDatabase();
                 QueryRunner queryRunner = new QueryRunner();
             
                resultadoSQL = queryRunner.update(dbCon, DETELEPEDIDOBYID+ id  );
                                         
               registrosborrados.put("Registros Borrados", resultadoSQL);
               if(resultadoSQL == 0 ){
                   resp.put("success", Boolean.FALSE);
               }else{
                   resp.put("success", Boolean.TRUE);
               }
               
               resp.put("erromsg", null);
               resp.put("payload", registrosborrados);
                
                
                       
               
        }catch(Exception e){        
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", e.getMessage());
            resp.put("payload", null);        
        }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                     resp.put("success", Boolean.FALSE);
                     resp.put("erromsg", sqle.getMessage());
                     resp.put("payload", null);      
                 }
             }
            
        }
       
       
    return resp;

}


String  INSERT_CLIENTE = "INSERT INTO clientes(version, iva, telefono, rfc, nombre, email, observ, direccion, ciudad, nucta, diascred) VALUES(?,?,?,?,?,?,?,?,?,?,?)";
String  UPDATE_CLIENTE = "UPDATE clientes SET version=?, iva=?, telefono=?, rfc=?, nombre=?, email=?, observ=?, direccion=?, ciudad=?, nucta=?, diascred=? WHERE id=?";
/**
 *  Metodo que inserta o actualiza a un cliente.
 * @param elcliente
 * @return 
 */
public Map<String, Object> insertaCliente(Map elcliente){
    
    Connection dbCon = null;
    Map<String, Object> resp = new HashMap<String, Object> ();
    Map<String, Object> payload = new HashMap<String, Object> ();
    ScalarHandler<Long> scalarHandler = new ScalarHandler<Long>(); // para qyue obtenga el id
 
    Integer id          = elcliente.get("id")       == null ? 0    : (Integer)elcliente.get("id");  // si viene es update si no viene o es cero es insert
    Double  iva         = elcliente.get("iva")      == null ? 0.0  : (Double) elcliente.get("iva");
    String  telefono    = elcliente.get("telefono") == null ? null : (String)elcliente.get("telefono");
    String  rfc         = elcliente.get("rfc")      == null ? null : (String)elcliente.get("rfc");
    String  nombre      = elcliente.get("nombre")   == null ? null : (String)elcliente.get("nombre");
    String  email       = elcliente.get("email")    == null ? null : (String)elcliente.get("email");    
    String  observ      = elcliente.get("observ")   == null ? null : (String)elcliente.get("observ");  
    String  direccion   = elcliente.get("direccion")== null ? null : (String)elcliente.get("direccion");
    String  ciudad      = elcliente.get("ciudad")   == null ? null : (String)elcliente.get("ciudad");
    Integer nucta      = elcliente.get("nucta")     == null ? 0    : (Integer)elcliente.get("nucta"); 
    Integer diascred    = elcliente.get("diascred") == null ? 0    : (Integer)elcliente.get("diascred"); 
       

       
       //Procedo a grbar el encabezado
       try{
     
		dbCon = new JDBCUtils().connectDatabase();           
                QueryRunner queryRunner = new QueryRunner();
               
        
                int numrows; 
                Long newid = 0L;
                if( id != 0){ // Update
                    numrows = queryRunner.update(dbCon, UPDATE_CLIENTE , 0, iva, telefono, rfc, nombre, email, observ, direccion, ciudad, nucta, diascred, id );
                    payload.put("actualizados", numrows);
                }
                else{                  
                     newid = queryRunner.insert(dbCon, INSERT_CLIENTE , scalarHandler, 0,  iva, telefono, rfc, nombre, email, observ, direccion, ciudad, nucta, diascred );
                      payload.put("id", newid);
                }
                
                // Finalizo
                DbUtils.commitAndCloseQuietly(dbCon);
                
                resp.put("success", Boolean.TRUE);
                resp.put("erromsg", null);
                resp.put("payload", payload);
               
        }catch(Exception e){
            //procedo roolback
            DbUtils.rollbackAndCloseQuietly(dbCon);
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", e.getMessage());
            resp.put("payload", null);        
        }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                     resp.put("success", Boolean.FALSE);
                     resp.put("erromsg", sqle.getMessage());
                     resp.put("payload", null);      
                 }
             }
            
        }
       
    return resp;
    
}




String  INSERT_ARTICULO = "INSERT INTO articulos(version,   lugar,   grupo_id,   subgrupo_id,   unidmed_id,   almacen_id,   valoriva,   pcio4,   pcio3,   pcio2,   pcio1,   parte,  estatus,   codant,   minimo,   maximo,   codigo,   valorutmin,   valorutsug,   descripcion,   activo) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
String  UPDATE_ARTICULO = "UPDATE articulos  SET version=?, lugar=?, grupo_id=?, subgrupo_id=?, unidmed_id=?, almacen_id=?, valoriva=?, pcio4=?, pcio3=?, pcio2=?, pcio1=?, parte=?, estatus=?, codant=?, minimo=?, maximo=?, codigo=?, valorutmin=?, valorutsug=?, descripcion=?, activo=? WHERE id=?";
/**
 *  Metodo que inserta o actualiza a un articulo.
 * @param elarticulo
 * @return 
 */
public Map<String, Object> insertaArticulo(Map elarticulo){
    
    Connection dbCon = null;
    Map<String, Object> resp = new HashMap<String, Object> ();
    Map<String, Object> payload = new HashMap<String, Object> ();
    ScalarHandler<Long> scalarHandler = new ScalarHandler<Long>(); // para qyue obtenga el id
 
    Integer id          = elarticulo.get("id")              == null ? 0     : (Integer)elarticulo.get("id");  // si viene es update si no viene o es cero es insert
    String  lugar       = elarticulo.get("lugar")           == null ? ""   : (String)elarticulo.get("lugar");
    Integer grupo_id    = elarticulo.get("grupo_id")        == null ? 0     : (Integer)elarticulo.get("grupo_id"); 
    Integer subgrupo_id = elarticulo.get("subgrupo_id")     == null ? 0     : (Integer)elarticulo.get("subgrupo_id"); 
    Integer unidmed_id  = elarticulo.get("unidmed_id")      == null ? 0     : (Integer)elarticulo.get("unidmed_id"); 
    Integer almacen_id  = elarticulo.get("almacen_id")      == null ? 0     : (Integer)elarticulo.get("almacen_id"); 
    Double  valoriva    = elarticulo.get("valoriva")        == null ? 0.0   : (Double)elarticulo.get("valoriva"); 
    Double  pcio4       = elarticulo.get("pcio4")           == null ? 0.0   : (Double)elarticulo.get("pcio4");
    Double  pcio3       = elarticulo.get("pcio3")           == null ? 0.0   : (Double)elarticulo.get("pcio3");
    Double  pcio2       = elarticulo.get("pcio2")           == null ? 0.0   : (Double)elarticulo.get("pcio2");
    Double  pcio1       = elarticulo.get("pcio1")           == null ? 0.0   : (Double)elarticulo.get("pcio1");
    String  parte       = elarticulo.get("parte")           == null ? ""   : (String)elarticulo.get("parte");
    String  estatus     = elarticulo.get("estatus")         == null ? ""   : (String)elarticulo.get("estatus");
    String  codant      = elarticulo.get("codant")          == null ? ""   : (String)elarticulo.get("codant");
    Double  minimo      = elarticulo.get("minimo")          == null ? 0.0   : (Double)elarticulo.get("minimo");
    Double  maximo      = elarticulo.get("maximo")          == null ? 0.0   : (Double)elarticulo.get("maximo");
    String  codigo      = elarticulo.get("codigo")          == null ? ""   : (String)elarticulo.get("codigo");
    Double  valorutmin  = elarticulo.get("valorutmin")      == null ? 0.0   : (Double)elarticulo.get("valorutmin");
    Double  valorutsug  = elarticulo.get("valorutsug")      == null ? 0.0   : (Double)elarticulo.get("valorutsug");
    String  descripcion = elarticulo.get("descripcion")     == null ? ""   : (String)elarticulo.get("descripcion");
    Boolean activo      = elarticulo.get("activo")          == null ? false : (Boolean)elarticulo.get("activo");
    
 
       

       
       //Procedo a grbar el encabezado
       try{
     
		dbCon = new JDBCUtils().connectDatabase();           
                QueryRunner queryRunner = new QueryRunner();
               
    
                int numrows; 
                Long newid = 0L;
                if( id != 0){ // Update
                   // String  UPDATE_ARTICULO = "UPDATE articulos     SET version=?, lugar=?,     grupo_id=?, subgrupo_id=?, unidmed_id=?, almacen_id=?, valoriva=?, pcio4=?, pcio3=?, pcio2=?, pcio1=?, parte=? estatus=?, codant=?, minimo=?, maximo=?, codigo=?, valorutmin=?, valorutsug=?, descripcion=?, activo=? WHERE id=?";
                    numrows = queryRunner.update(dbCon, UPDATE_ARTICULO ,               0, lugar, grupo_id, subgrupo_id, unidmed_id, almacen_id, valoriva, pcio4, pcio3, pcio2, pcio1, parte, estatus, codant, minimo, maximo, codigo, valorutmin, valorutsug, descripcion, activo,  id );
                    payload.put("actualizados", numrows);
                }
                else{                  
                     newid = queryRunner.insert(dbCon, INSERT_ARTICULO , scalarHandler, 0, lugar, grupo_id, subgrupo_id, unidmed_id, almacen_id, valoriva, pcio4, pcio3, pcio2, pcio1, parte, estatus, codant, minimo, maximo, codigo, valorutmin, valorutsug, descripcion, activo );
                      payload.put("id", newid);
                }
                
                // Finalizo
                DbUtils.commitAndCloseQuietly(dbCon);
                
                resp.put("success", Boolean.TRUE);
                resp.put("erromsg", null);
                resp.put("payload", payload);
               
        }catch(Exception e){
            //procedo roolback
            DbUtils.rollbackAndCloseQuietly(dbCon);
            resp.put("success", Boolean.FALSE);
            resp.put("erromsg", e.getMessage());
            resp.put("payload", null);        
        }finally{

            if(dbCon!=null){
                 try{
                     dbCon.close();
                 }catch(SQLException sqle){
                     resp.put("success", Boolean.FALSE);
                     resp.put("erromsg", sqle.getMessage());
                     resp.put("payload", null);      
                 }
             }
            
        }
       
    return resp;
    
}

}
